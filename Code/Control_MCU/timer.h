/*
 * timer.h
 *
 *  Created on: Mar 26, 2021
 *      Author: Youssef El-Nemaky
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "micro_config.h"
#include "std_types.h"
#include "common_macros.h"

/************************************
 * 				TIMER 0
 ************************************/

#define TIMER_INTERRUPT_MASK_REGISTER TIMSK
#define TIMER_INTERRUPT_FLAG_REGISTER TIFR
/* TIMER0 REGISTERS */

#define TIMER0_CONTROL_REGISTER TCCR0
#define TIMER0_INITIAL_VALUE_REGISTER TCNT0
#define TIMER0_OUTPUT_COMPARE_REGISTER OCR0



/* TCCR0 BITS : TIMER/COUNTER0 CONTROL BITS */
#define TIMER0_FORCE_OUTPUT_COMPARE_BIT FOC0
#define TIMER0_WAVEFORM_GENERATION_MODE_BIT0 WGM00
#define TIMER0_WAVEFORM_GENERATION_MODE_BIT1 WGM01
#define TIMER0_COMPARE_MATCH_OUTPUT_MODE_BIT0 COM00
#define TIMER0_COMPARE_MATCH_OUTPUT_MODE_BIT1 COM01
#define TIMER0_CLOCK_SELECT_BIT0 CS00
#define TIMER0_CLOCK_SELECT_BIT1 CS01
#define TIMER0_CLOCK_SELECT_BIT2 CS02

/* TIMSK BITS : TIMER0 INTERRUPT MASK BITS  */
#define TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT_ENABLE_BIT OCIE0
#define TIMER0_OVERFLOW_INTERRUPT_ENABLE_BIT TOIE0

/* TIFR BITS : TIMER0 INTERRUPT FLAG REGISTER */
#define TIMER0_OUTPUT_COMPARE_FLAG_BIT OCF0
#define TIMER0_OUTPUT_OVERFLOW_FLAG_BIT TOV0

/************************************
 * 				TIMER 1
 ************************************/

/* TIMER1 REGISTERS */
#define TIMER1_CONTROL_REGISTER_A TCCR1A
#define TIMER1_CONTROL_REGISTER_B TCCR1B
#define TIMER1_INITIAL_VALUE_REGISTER TCNT1
#define TIMER1_INITIAL_VALUE_L_REGISTER TCNT1L
#define TIMER1_INITIAL_VALUE_H_REGISTER TCNT1H
#define TIMER1_OUTPUT_COMPARE_MATCH_REGISTER_A OCR1A
#define TIMER1_OUTPUT_COMPARE_MATCH_L_REGISTER_A OCR1AL
#define TIMER1_OUTPUT_COMPARE_MATCH_H_REGISTER_A OCR1AH
#define TIMER1_OUTPUT_COMPARE_MATCH_REGISTER_B OCR1B
#define TIMER1_OUTPUT_COMPARE_MATCH_L_REGISTER_B OCR1BL
#define TIMER1_OUTPUT_COMPARE_MATCH_H_REGISTER_B OCR1BH

/* TCCR1A BITS : TIMER/COUNTER1 CONTROL REGISTER A BITS */
#define TIMER1_FORCE_OUTPUT_COMPARE_REGISTER_A_BIT FOC1A
#define TIMER1_FORCE_OUTPUT_COMPARE_REGISTER_B_BIT FOC1B
#define TIMER1_WAVEFORM_GENERATION_MODE_BIT0 WGM10
#define TIMER1_WAVEFORM_GENERATION_MODE_BIT1 WGM11

/* TCCR1B BITS : TIMER/COUNTER1 CONTROL REGISTER B BITS */
#define TIMER1_WAVEFORM_GENERATION_MODE_BIT2 WGM12
#define TIMER1_WAVEFORM_GENERATION_MODE_BIT3 WGM13
#define TIMER1_CLOCK_SELECT_BIT0 CS10
#define TIMER1_CLOCK_SELECT_BIT1 CS11
#define TIMER1_CLOCK_SELECT_BIT2 CS12

/* TIMSK BITS : TIMER1 INTERRUPT MASK BITS  */
#define TIMER1_OVERFLOW_INTERRUPT_ENABLE_BIT TOIE1
#define TIMER1_OUTPUT_COMPARE_MATCH_A_INTERRUPT_ENABLE_BIT OCIE1A
#define TIMER1_OUTPUT_COMPARE_MATCH_B_INTERRUPT_ENABLE_BIT OCIE1B

/************************************
 * 				TIMER 2
 ************************************/

/* TIMER2 CONTROL REGISTER */
#define TIMER2_CONTROL_REGISTER TCCR2
#define TIMER2_INITIAL_VALUE_REGISTER TCNT2
#define TIMER2_OUTPUT_COMPARE_REGISTER OCR2
#define TIMER2_ASYNCHRONOUS_STATUS_REGSITER ASSR

/* TCCR2 BITS : TIMER/COUNTER2 CONTROL REGISTER BITS*/
#define TIMER2_FORCE_OUTPUT_COMPARE_BIT FOC2
#define TIMER2_WAVEFORM_GENERATION_MODE_BIT0 WGM20
#define TIMER2_WAVEFORM_GENERATION_MODE_BIT1 WGM21
#define TIMER2_CLOCK_SELECT_BIT0 CS20
#define TIMER2_CLOCK_SELECT_BIT1 CS21
#define TIMER2_CLOCK_SELECT_BIT2 CS22

/* TIMSK BITS : TIMER2 INTERRUPT MASK BITS */
#define TIMER2_OVERFLOW_INTERRUPT_ENABLE_BIT TOIE2
#define TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT_ENABLE_BIT OCIE2

/*enums and structure that will set the settings for a specific timer*/
typedef enum{
	Timer0,Timer1,Timer2
}Timer_Number;

typedef enum{
	Overflow,Compare
}Timer_Mode;

typedef enum
{
	NO_CLOCK,F_CPU_CLOCK,F_CPU_8,F_CPU_64,F_CPU_256,F_CPU_1024
}Timer_Clock;

typedef struct{
	uint16 timer_initialValue;
	uint16 timer_compareMatchValue;
	Timer_Number timer_no;
	Timer_Mode timer_mode;
	Timer_Clock timer_clock;
}Timer_Config;


/************************************
 * 		  FUNCTIONS PROTOTYPES
 ************************************/
void TIMER_init(const Timer_Config *);
void TIMER_setCallBack(void (*a_ptr)(void),Timer_Number);
void TIMER_deInit(Timer_Number);

#endif /* TIMER_H_ */
